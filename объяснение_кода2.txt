### Объяснение кода системы скоринга банкротств

Проект представляет собой веб-приложение для анализа и скоринга потенциальных банкротов с использованием Flask и PostgreSQL. Основные компоненты:

#### 1. Структура проекта
```
bankruptcy_scoring/
├── app.py                      # Основное приложение
├── config.py                   # Конфигурация
├── database/                   # Работа с БД
├── data_processing/            # Обработка данных
├── enrichment/                 # Обогащение данных
├── scoring/                    # Расчет скоринга
├── utils/                      # Вспомогательные утилиты
├── ml_model/                   # ML модели
├── templates/                  # HTML шаблоны
├── static/                     # CSS стили
├── scripts/                    # Скрипты управления
├── requirements.txt            # Зависимости
└── docker-compose.yml          # Docker конфигурация
```

#### 2. Ключевые компоненты

**app.py** - Основное Flask-приложение:
- Маршруты для веб-интерфейса и API
- Обработка загрузки файлов
- Запуск процесса скоринга
- Интеграция всех компонентов системы
- Логирование и обработка ошибок

**config.py** - Конфигурация:
- Настройки путей (загрузки, результаты, логи)
- Параметры внешних сервисов (ФССП, Федресурс и др.)
- Регионы и прокси-листы
- Параметры ML-модели

**database/database.py** - Работа с PostgreSQL:
- Инициализация БД и таблиц
- Сохранение лидов и результатов скоринга
- Логирование ошибок
- Получение статистики

**data_processing/** - Обработка данных:
- Загрузка CSV (`DataLoader`)
- Нормализация телефонов, ФИО, адресов (`DataNormalizer`)
- Удаление дубликатов (`Deduplicator`)

**enrichment/** - Обогащение данных:
- Интеграция с гос. сервисами (ФССП, Федресурс, Росреестр и др.)
- Ротация прокси для обхода блокировок
- Кеширование результатов запросов

**scoring/** - Система оценки:
- Rule-based скоринг (`calculate_score`, `assign_group`)
- ML-модель CatBoost (`predict_proba`)
- Комбинированный подход (70% правила + 30% ML)

**utils/** - Вспомогательные инструменты:
- Логирование (`logger.py`)
- Ротация прокси (`proxy_rotator.py`)
- Работа с файлами (`file_utils.py`)

#### 3. Рабочий процесс

1. **Загрузка данных**:
   - Пользователь загружает CSV-файлы через веб-интерфейс
   - Система нормализует и объединяет данные

2. **Обогащение**:
   - Проверка по 5 государственным сервисам:
     - ФССП (долги)
     - Федресурс (банкротства)
     - Росреестр (имущество)
     - Налоговая (статус ИНН)
     - Суды (судебные приказы)
   - Параллельная обработка с ротацией прокси

3. **Скоринг**:
   - Rule-based оценка по параметрам:
     - Сумма долга
     - Тип кредитора
     - Наличие имущества
     - Активность ИНН
   - ML-оценка (CatBoost)
   - Комбинированный результат

4. **Фильтрация и результат**:
   - Применение фильтров пользователя
   - Сохранение результатов в CSV и БД
   - Формирование отчета

#### 4. Технические особенности

- **Парсинг данных**:
  - BeautifulSoup для HTML
  - JSON API для государственных сервисов
  - Ротация User-Agent и прокси
  - Кеширование результатов

- **Работа с БД**:
  - PostgreSQL для хранения данных
  - Миграции для управления схемой БД
  - Оптимизированные запросы с индексами

- **ML-модель**:
  - CatBoost для бинарной классификации
  - Фичи: сумма долга, количество долгов, наличие имущества и др.
  - Автоматическое обучение и обновление модели

- **Безопасность**:
  - Валидация входных данных
  - Обработка исключений
  - Защита от SQL-инъекций
  - Безопасная работа с файлами

#### 5. Запуск системы

1. Инициализация БД:
```bash
python scripts/init_db.py
python scripts/run_migrations.py
```

2. Обучение ML-модели:
```bash
python ml_model/train.py
```

3. Запуск приложения:
```bash
python app.py
```

4. Docker-запуск:
```bash
docker-compose up
```

Система предоставляет веб-интерфейс для загрузки данных, настройки параметров скоринга и получения результатов в формате CSV.